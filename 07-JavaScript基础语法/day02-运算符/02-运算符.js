// 加减乘除取余 算数运算符
console.log(9%2);
//浮点数的精度问题, 浮点数直接参与运算存在精度问题,应该避免浮点数直接参与运算
var num = 0.1 + 0.2;
console.log(num == 0.3); //结果为flase

//递增和递减运算符
var num_1 = 0;
var num_2 = 0;
for (let index = 0; index < 10; index++) {
    //前置递增 先加一后引用
    console.log(++num_1 + 10);
    //后置递增 先引用后加一
    console.log(num_2++ + 10);  
}
var e = 10;
var f = e++ + ++e; //1. e++ = 10, e = 11;  2. ++e = 12 , e = 12
console.log(f);

//比较运算符
/* 
1.< 小于
2.> 大于
3.>= 大于等于
4.<=小于等于
5.== 等于  比较是否相等   只要求值完全相等,数据类型可以不一致
6. != 不等于
7. ===  !== 全等 要求值和 数据类型都一致    37 === '37'  flase  
*/

console.log(18 == '18'); //true  默认转换数据类型 会把字符串类型的数据转换为数值型 
console.log(18 != '18'); //flase  默认转化类型 把字符串类型转换为数值型


console.log(18 === '18'); //全等于  完全等于 flase  要求两侧的值以及数据类型完全一致才可以

//逻辑运算符
/* 
1. && 逻辑与
2. || 逻辑或
3.  ! 逻辑非
*/

//数值类型参与 逻辑运算  
//断路运算   
/* 逻辑与逻辑运算:如果数值参与逻辑运算,如果第一个数值为真 则返回二个表达式的值  如果第一个表达式为假,则返回第一个表达式的值  这里与oc不一样! */
var  num_n =  123&& 456;
var num_n1 = 0&&456;
console.log(num_n);
console.log(num_n1);
 /* 逻辑或断路运算  如果表达式1的值为真则返回表达式1  如果第一个表达式的值为假,则返回第二个表达式的值 */

 var num_m = 123||345;
 var num_m1 = 0||345;
 console.log(num_m);
 console.log(num_m1);

 //赋值运算符
 /* 
 1. = 直接赋值
 2. +=  加等   -= 减等
 3. *= 乘等于    age *= 5;    age = age * 5;
 */
 

 //运算符优先级
 /* 
 1.() 小括号
 2.一元运算符  ++ -- !
 3.算数运算符  + - * /
 4.关系运算符  >  <  >= <= 
 5.相等运算符 == !=  === !==
 6.逻辑运算符 先&& 后 ||
 7. 赋值运算符   =
 8.逗号运算符  ,
 */



